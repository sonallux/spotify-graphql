type Query {
  markets: [String]
  search(
    """
    If `include_external=audio` is specified it signals that the client can play externally hosted audio content, and marks
    the content as playable in the response. By default externally hosted audio content is marked as unplayable in the response.
    """
    include_external: String, 
    "The maximum number of results to return in each item type."
    limit: Int = 20, 
    """
    The index of the first result to return. Use
    with limit to get the next page of search results.
    """
    offset: Int = 0, 
    """
    Your search query.
    
    You can narrow down your search using field filters. The available filters are `album`, `artist`, `track`, `year`, `upc`, `tag:hipster`, `tag:new`, `isrc`, and `genre`. Each field filter only applies to certain result types.
    
    The `artist` filter can be used while searching albums, artists or tracks.<br />
    The `album` and `year` filters can be used while searching albums or tracks. You can filter on a single `year` or a range (e.g. 1955-1960).<br />
    The `genre` filter can be use while searching tracks and artists.<br />
    The `isrc` and `track` filters can be used while searching tracks.<br />
    The `upc`, `tag:new` and `tag:hipster` filters can only be used while searching albums. The `tag:new` filter will return albums released in the past two weeks and `tag:hipster` can be used to return only albums with the lowest 10% popularity.<br />
    
    You can also use the `NOT` operator to exclude keywords from your search.
    """
    q: String!, 
    """
    A comma-separated list of item types to search
    across. Search results include hits from all the specified item types. For
    example: `q=name:abacab&type=album,track` returns both albums and tracks
    with "abacab" included in their name.
    """
    type: [String]!
  ): SearchItems
}

union UnionEpisodeTrack = Episode | Track

type Copyright {
  "The copyright text for this content."
  text: String
  "The type of copyright: `C` = the copyright, `P` = the sound recording (performance) copyright."
  type: String
}

type ExternalId {
  "[International Article Number](http://en.wikipedia.org/wiki/International_Article_Number_%28EAN%29)"
  ean: String
  "[International Standard Recording Code](http://en.wikipedia.org/wiki/International_Standard_Recording_Code)"
  isrc: String
  "[Universal Product Code](http://en.wikipedia.org/wiki/Universal_Product_Code)"
  upc: String
}

type ExternalUrl {
  "The [Spotify URL](/documentation/web-api/#spotify-uris-and-ids) for the object."
  spotify: String
}

type Followers {
  "This will always be set to null, as the Web API does not support it at the moment."
  href: String
  "The total number of followers."
  total: Int
}

type Image {
  "The image height in pixels."
  height: Int
  "The source URL of the image."
  url: String
  "The image width in pixels."
  width: Int
}

type SearchItems {
  albums: AlbumsPaging
  artists: ArtistsPaging
  episodes: EpisodesPaging
  playlists: PlaylistsPaging
  shows: ShowsPaging
  tracks: TracksPaging
}

