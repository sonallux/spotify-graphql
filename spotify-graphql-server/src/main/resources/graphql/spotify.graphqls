type AddToQueuePayload {
  status: Int
}

type AddTracksToPlaylistPayload {
  snapshot_id: SnapshotId
  status: Int
}

type Category {
  "A link to the Web API endpoint returning full details of the category."
  href: String
  "The category icon, in various sizes."
  icons: [Image]
  "The [Spotify category ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) of the category."
  id: String
  "The name of the category."
  name: String
  playlists(
    "A country: an [ISO 3166-1 alpha-2 country code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). Provide this parameter to ensure that the category exists for a particular country."
    country: String,
    "The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50."
    limit: Int,
    "The index of the first item to return. Default: 0 (the first object). Use with `limit` to get the next set of items."
    offset: Int
  ): PlaylistsPaging
}

type ChangePlaylistDetailsPayload {
  status: Int
}

type CreatePlaylistPayload {
  playlist: Playlist
  status: Int
}

type ExplicitContentSettings {
  "When `true`, indicates that explicit content should not be played."
  filter_enabled: Boolean
  "When `true`, indicates that the explicit content setting is locked and can't be changed by the user."
  filter_locked: Boolean
}

type FeaturedPlaylist {
  message: String
  playlists: PlaylistsPaging
}

type FollowArtistsUsersPayload {
  status: Int
}

type FollowPlaylistPayload {
  status: Int
}

type Library {
  albums(
    "The maximum number of objects to return. Default: 20. Minimum: 1. Maximum: 50."
    limit: Int,
    "The index of the first object to return. Default: 0 (i.e., the first object). Use with `limit` to get the next set of objects."
    offset: Int
  ): SavedAlbumsPaging
  episodes(
    "The maximum number of objects to return. Default: 20. Minimum: 1. Maximum: 50."
    limit: Int,
    "The index of the first object to return. Default: 0 (i.e., the first object). Use with `limit` to get the next set of objects."
    offset: Int
  ): SavedEpisodesPaging
  shows(
    "The maximum number of shows to return. Default: 20. Minimum: 1. Maximum: 50"
    limit: Int,
    "The index of the first show to return. Default: 0 (the first object). Use with limit to get the next set of shows."
    offset: Int
  ): SavedShowsPaging
  tracks(
    "The maximum number of objects to return. Default: 20. Minimum: 1. Maximum: 50."
    limit: Int,
    "The index of the first object to return. Default: 0 (i.e., the first object). Use with `limit` to get the next set of objects."
    offset: Int
  ): SavedTracksPaging
}

type Mutation {
  "Add an item to the end of the user's current playback queue."
  addToQueue(input: addToQueueInput!): AddToQueuePayload
  "Add one or more items to a user's playlist."
  addTracksToPlaylist(input: addTracksToPlaylistInput!): AddTracksToPlaylistPayload
  """
  Change a playlist's name and public/private state. (The user must, of
  course, own the playlist.)
  """
  changePlaylistDetails(input: changePlaylistDetailsInput!): ChangePlaylistDetailsPayload
  """
  Create a playlist for a Spotify user. (The playlist will be empty until
  you [add tracks](https://developer.spotify.com/documentation/web-api/reference/#endpoint-add-tracks-to-playlist).)
  """
  createPlaylist(input: createPlaylistInput!): CreatePlaylistPayload
  "Add the current user as a follower of one or more artists or other Spotify users."
  followArtistsUsers(input: followArtistsUsersInput!): FollowArtistsUsersPayload
  "Add the current user as a follower of a playlist."
  followPlaylist(input: followPlaylistInput!): FollowPlaylistPayload
  "Pause playback on the user's account."
  pauseAUsersPlayback(input: pauseAUsersPlaybackInput!): PauseAUsersPlaybackPayload
  "Remove one or more albums from the current user's 'Your Music' library."
  removeAlbumsUser(input: removeAlbumsUserInput!): RemoveAlbumsUserPayload
  """
  Remove one or more episodes from the current user's library.

  This API endpoint is in **beta** and could change without warning. Please share any feedback that you have, or issues that you discover, in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer).
  """
  removeEpisodesUser(input: removeEpisodesUserInput!): RemoveEpisodesUserPayload
  "Delete one or more shows from current Spotify user's library."
  removeShowsUser(input: removeShowsUserInput!): RemoveShowsUserPayload
  "Remove one or more items from a user's playlist."
  removeTracksPlaylist(input: removeTracksPlaylistInput!): RemoveTracksPlaylistPayload
  "Remove one or more tracks from the current user's 'Your Music' library."
  removeTracksUser(input: removeTracksUserInput!): RemoveTracksUserPayload
  "Reorder an item or a group of items in a playlist."
  reorderPlaylistsTracks(input: reorderPlaylistsTracksInput!): ReorderPlaylistsTracksPayload
  "Replace all the items in a playlist, overwriting its existing items. This powerful request can be useful for replacing items, re-ordering existing items, or clearing the playlist."
  replacePlaylistsTracks(input: replacePlaylistsTracksInput!): ReplacePlaylistsTracksPayload
  "Save one or more albums to the current user's 'Your Music' library."
  saveAlbumsUser(input: saveAlbumsUserInput!): SaveAlbumsUserPayload
  """
  Save one or more episodes to the current user's library.

  This API endpoint is in **beta** and could change without warning. Please share any feedback that you have, or issues that you discover, in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer).
  """
  saveEpisodesUser(input: saveEpisodesUserInput!): SaveEpisodesUserPayload
  "Save one or more shows to current Spotify user's library."
  saveShowsUser(input: saveShowsUserInput!): SaveShowsUserPayload
  "Save one or more tracks to the current user's 'Your Music' library."
  saveTracksUser(input: saveTracksUserInput!): SaveTracksUserPayload
  "Seeks to the given position in the user's currently playing track."
  seekToPositionInCurrentlyPlayingTrack(input: seekToPositionInCurrentlyPlayingTrackInput!): SeekToPositionInCurrentlyPlayingTrackPayload
  """
  Set the repeat mode for the user's playback. Options are repeat-track,
  repeat-context, and off.
  """
  setRepeatModeOnUsersPlayback(input: setRepeatModeOnUsersPlaybackInput!): SetRepeatModeOnUsersPlaybackPayload
  "Set the volume for the user's current playback device."
  setVolumeForUsersPlayback(input: setVolumeForUsersPlaybackInput!): SetVolumeForUsersPlaybackPayload
  "Skips to next track in the user's queue."
  skipUsersPlaybackToNextTrack(input: skipUsersPlaybackToNextTrackInput!): SkipUsersPlaybackToNextTrackPayload
  "Skips to previous track in the user's queue."
  skipUsersPlaybackToPreviousTrack(input: skipUsersPlaybackToPreviousTrackInput!): SkipUsersPlaybackToPreviousTrackPayload
  "Start a new context or resume current playback on the user's active device."
  startAUsersPlayback(input: startAUsersPlaybackInput!): StartAUsersPlaybackPayload
  "Toggle shuffle on or off for user's playback."
  toggleShuffleForUsersPlayback(input: toggleShuffleForUsersPlaybackInput!): ToggleShuffleForUsersPlaybackPayload
  "Transfer playback to a new device and determine if it should start playing."
  transferAUsersPlayback(input: transferAUsersPlaybackInput!): TransferAUsersPlaybackPayload
  "Remove the current user as a follower of one or more artists or other Spotify users."
  unfollowArtistsUsers(input: unfollowArtistsUsersInput!): UnfollowArtistsUsersPayload
  "Remove the current user as a follower of a playlist."
  unfollowPlaylist(input: unfollowPlaylistInput!): UnfollowPlaylistPayload
  "Replace the image used to represent a specific playlist."
  uploadCustomPlaylistCover(input: uploadCustomPlaylistCoverInput!): UploadCustomPlaylistCoverPayload
}

type CategoriesPaging {
  "A link to the Web API endpoint returning the full result of the request"
  href: String
  "The requested data."
  items: [Category]
  "The maximum number of items in the response (as set in the query or by default)."
  limit: Int
  "URL to the next page of items. ( `null` if none)"
  next: String
  "The offset of the items returned (as set in the query or by default)"
  offset: Int
  "URL to the previous page of items. ( `null` if none)"
  previous: String
  "The total number of items available to return."
  total: Int
}

type SavedAlbumsPaging {
  "A link to the Web API endpoint returning the full result of the request"
  href: String
  "The requested data."
  items: [SavedAlbum]
  "The maximum number of items in the response (as set in the query or by default)."
  limit: Int
  "URL to the next page of items. ( `null` if none)"
  next: String
  "The offset of the items returned (as set in the query or by default)"
  offset: Int
  "URL to the previous page of items. ( `null` if none)"
  previous: String
  "The total number of items available to return."
  total: Int
}

type SavedEpisodesPaging {
  "A link to the Web API endpoint returning the full result of the request"
  href: String
  "The requested data."
  items: [SavedEpisode]
  "The maximum number of items in the response (as set in the query or by default)."
  limit: Int
  "URL to the next page of items. ( `null` if none)"
  next: String
  "The offset of the items returned (as set in the query or by default)"
  offset: Int
  "URL to the previous page of items. ( `null` if none)"
  previous: String
  "The total number of items available to return."
  total: Int
}

type SavedShowsPaging {
  "A link to the Web API endpoint returning the full result of the request"
  href: String
  "The requested data."
  items: [SavedShow]
  "The maximum number of items in the response (as set in the query or by default)."
  limit: Int
  "URL to the next page of items. ( `null` if none)"
  next: String
  "The offset of the items returned (as set in the query or by default)"
  offset: Int
  "URL to the previous page of items. ( `null` if none)"
  previous: String
  "The total number of items available to return."
  total: Int
}

type SavedTracksPaging {
  "A link to the Web API endpoint returning the full result of the request"
  href: String
  "The requested data."
  items: [SavedTrack]
  "The maximum number of items in the response (as set in the query or by default)."
  limit: Int
  "URL to the next page of items. ( `null` if none)"
  next: String
  "The offset of the items returned (as set in the query or by default)"
  offset: Int
  "URL to the previous page of items. ( `null` if none)"
  previous: String
  "The total number of items available to return."
  total: Int
}

type PauseAUsersPlaybackPayload {
  status: Int
}

type PrivateUser {
  "The country of the user, as set in the user's account profile. An [ISO 3166-1 alpha-2 country code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). *This field is only available when the current user has granted access to the [user-read-private](https://developer.spotify.com/documentation/general/guides/authorization-guide/#list-of-scopes) scope.*"
  country: String
  "The name displayed on the user's profile. `null` if not available."
  display_name: String
  "The user's email address, as entered by the user when creating their account. ***Important!** This email address is unverified; there is no proof that it actually belongs to the user.* *This field is only available when the current user has granted access to the [user-read-email](https://developer.spotify.com/documentation/general/guides/authorization-guide/#list-of-scopes) scope.*"
  email: String
  "The user's explicit content settings. *This field is only available when the current user has granted access to the [user-read-private](https://developer.spotify.com/documentation/general/guides/authorization-guide/#list-of-scopes) scope.*"
  explicit_content: ExplicitContentSettings
  "Known external URLs for this user."
  external_urls: ExternalUrl
  "Information about the followers of the user."
  followers: Followers
  "A link to the Web API endpoint for this user."
  href: String
  "The [Spotify user ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the user."
  id: String
  "The user's profile image."
  images: [Image]
  "The user's Spotify subscription level: 'premium', 'free', etc. (The subscription level 'open' can be considered the same as 'free'.) *This field is only available when the current user has granted access to the [user-read-private](https://developer.spotify.com/documentation/general/guides/authorization-guide/#list-of-scopes) scope.*"
  product: String
  "The object type: 'user'"
  spotify_type: String
  top_artists(
    "The number of entities to return. Default: 20. Minimum: 1. Maximum: 50. For example: `limit=2`"
    limit: Int,
    "The index of the first entity to return. Default: 0 (i.e., the first track). Use with limit to get the next set of entities."
    offset: Int,
    "Over what time frame the affinities are computed. Valid values: `long_term` (calculated from several years of data and including all new data as it becomes available), `medium_term` (approximately last 6 months), `short_term` (approximately last 4 weeks). Default: `medium_term`"
    time_range: String
  ): ArtistsPaging
  top_tracks(
    "The number of entities to return. Default: 20. Minimum: 1. Maximum: 50. For example: `limit=2`"
    limit: Int,
    "The index of the first entity to return. Default: 0 (i.e., the first track). Use with limit to get the next set of entities."
    offset: Int,
    "Over what time frame the affinities are computed. Valid values: `long_term` (calculated from several years of data and including all new data as it becomes available), `medium_term` (approximately last 6 months), `short_term` (approximately last 4 weeks). Default: `medium_term`"
    time_range: String
  ): TracksPaging
  "The [Spotify URI](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the user."
  uri: String
}

type PublicUser {
  "The name displayed on the user's profile. `null` if not available."
  display_name: String
  "Known public external URLs for this user."
  external_urls: ExternalUrl
  "Information about the followers of this user."
  followers: Followers
  "A link to the Web API endpoint for this user."
  href: String
  "The [Spotify user ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for this user."
  id: String
  "The user's profile image."
  images: [Image]
  "The object type: 'user'"
  spotify_type: String
  "The [Spotify URI](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for this user."
  uri: String
}

type Query {
  categories(
    "A country: an [ISO 3166-1 alpha-2 country code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). Provide this parameter if you want to narrow the list of returned categories to those relevant to a particular country. If omitted, the returned items will be globally relevant."
    country: String,
    "The maximum number of categories to return. Default: 20. Minimum: 1. Maximum: 50."
    limit: Int,
    "The desired language, consisting of an [ISO 639-1](http://en.wikipedia.org/wiki/ISO_639-1) language code and an [ISO 3166-1 alpha-2 country code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2), joined by an underscore. For example: `es_MX`, meaning \"Spanish (Mexico)\". Provide this parameter if you want the category metadata returned in a particular language. Note that, if `locale` is not supplied, or if the specified language is not available, all strings will be returned in the Spotify default language (American English). The `locale` parameter, combined with the `country` parameter, may give odd results if not carefully matched. For example `country=SE&locale=de_DE` will return a list of categories relevant to Sweden but as German language strings."
    locale: String,
    "The index of the first item to return. Default: 0 (the first object). Use with `limit` to get the next set of categories."
    offset: Int
  ): CategoriesPaging
  category(
    "The [Spotify category ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the category."
    category_id: String!,
    "A country: an [ISO 3166-1 alpha-2 country code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). Provide this parameter to ensure that the category exists for a particular country."
    country: String,
    "The desired language, consisting of an [ISO 639-1](http://en.wikipedia.org/wiki/ISO_639-1) language code and an [ISO 3166-1 alpha-2 country code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2), joined by an underscore. For example: `es_MX`, meaning \"Spanish (Mexico)\". Provide this parameter if you want the category strings returned in a particular language. Note that, if `locale` is not supplied, or if the specified language is not available, the category strings returned will be in the Spotify default language (American English)."
    locale: String
  ): Category
  featured_playlists(
    "A country: an [ISO 3166-1 alpha-2 country code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). Provide this parameter if you want the list of returned items to be relevant to a particular country. If omitted, the returned items will be relevant to all countries."
    country: String,
    "The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50."
    limit: Int,
    "The desired language, consisting of a lowercase [ISO 639-1 language code](http://en.wikipedia.org/wiki/ISO_639-1) and an uppercase [ISO 3166-1 alpha-2 country code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2), joined by an underscore. For example: `es_MX`, meaning \"Spanish (Mexico)\". Provide this parameter if you want the results returned in a particular language (where available). Note that, if `locale` is not supplied, or if the specified language is not available, all strings will be returned in the Spotify default language (American English). The `locale` parameter, combined with the `country` parameter, may give odd results if not carefully matched. For example `country=SE&locale=de_DE` will return a list of categories relevant to Sweden but as German language strings."
    locale: String,
    "The index of the first item to return. Default: 0 (the first object). Use with `limit` to get the next set of items."
    offset: Int,
    "A timestamp in [ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601): `yyyy-MM-ddTHH:mm:ss`. Use this parameter to specify the user's local time to get results tailored for that specific date and time in the day. If not provided, the response defaults to the current UTC time. Example: \"2014-10-23T09:00:00\" for a user whose local time is 9AM. If there were no featured playlists (or there is no data) at the specified time, the response will revert to the current UTC time."
    timestamp: String
  ): FeaturedPlaylist
  library: Library
  markets: [String]
  me: PrivateUser
  new_releases(
    "A country: an [ISO 3166-1 alpha-2 country code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). Provide this parameter if you want the list of returned items to be relevant to a particular country. If omitted, the returned items will be relevant to all countries."
    country: String,
    "The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50."
    limit: Int,
    "The index of the first item to return. Default: 0 (the first object). Use with `limit` to get the next set of items."
    offset: Int
  ): AlbumsPaging
  recommendation(
    "The target size of the list of recommended tracks. For seeds with unusually small pools or when highly restrictive filtering is applied, it may be impossible to generate the requested number of recommended tracks. Debugging information for such cases is available in the response. Default: 20. Minimum: 1. Maximum: 100."
    limit: Int,
    "For each tunable track attribute, a hard ceiling on the selected track attribute's value can be provided. See tunable track attributes below for the list of available options. For example, `max_instrumentalness=0.35` would filter out most tracks that are likely to be instrumental."
    max_acousticness: Float,
    "For each tunable track attribute, a hard ceiling on the selected track attribute's value can be provided. See tunable track attributes below for the list of available options. For example, `max_instrumentalness=0.35` would filter out most tracks that are likely to be instrumental."
    max_danceability: Float,
    "For each tunable track attribute, a hard ceiling on the selected track attribute's value can be provided. See tunable track attributes below for the list of available options. For example, `max_instrumentalness=0.35` would filter out most tracks that are likely to be instrumental."
    max_duration_ms: Int,
    "For each tunable track attribute, a hard ceiling on the selected track attribute's value can be provided. See tunable track attributes below for the list of available options. For example, `max_instrumentalness=0.35` would filter out most tracks that are likely to be instrumental."
    max_energy: Float,
    "For each tunable track attribute, a hard ceiling on the selected track attribute's value can be provided. See tunable track attributes below for the list of available options. For example, `max_instrumentalness=0.35` would filter out most tracks that are likely to be instrumental."
    max_instrumentalness: Float,
    "For each tunable track attribute, a hard ceiling on the selected track attribute's value can be provided. See tunable track attributes below for the list of available options. For example, `max_instrumentalness=0.35` would filter out most tracks that are likely to be instrumental."
    max_key: Int,
    "For each tunable track attribute, a hard ceiling on the selected track attribute's value can be provided. See tunable track attributes below for the list of available options. For example, `max_instrumentalness=0.35` would filter out most tracks that are likely to be instrumental."
    max_liveness: Float,
    "For each tunable track attribute, a hard ceiling on the selected track attribute's value can be provided. See tunable track attributes below for the list of available options. For example, `max_instrumentalness=0.35` would filter out most tracks that are likely to be instrumental."
    max_loudness: Float,
    "For each tunable track attribute, a hard ceiling on the selected track attribute's value can be provided. See tunable track attributes below for the list of available options. For example, `max_instrumentalness=0.35` would filter out most tracks that are likely to be instrumental."
    max_mode: Int,
    "For each tunable track attribute, a hard ceiling on the selected track attribute's value can be provided. See tunable track attributes below for the list of available options. For example, `max_instrumentalness=0.35` would filter out most tracks that are likely to be instrumental."
    max_popularity: Int,
    "For each tunable track attribute, a hard ceiling on the selected track attribute's value can be provided. See tunable track attributes below for the list of available options. For example, `max_instrumentalness=0.35` would filter out most tracks that are likely to be instrumental."
    max_speechiness: Float,
    "For each tunable track attribute, a hard ceiling on the selected track attribute's value can be provided. See tunable track attributes below for the list of available options. For example, `max_instrumentalness=0.35` would filter out most tracks that are likely to be instrumental."
    max_tempo: Float,
    "For each tunable track attribute, a hard ceiling on the selected track attribute's value can be provided. See tunable track attributes below for the list of available options. For example, `max_instrumentalness=0.35` would filter out most tracks that are likely to be instrumental."
    max_time_signature: Int,
    "For each tunable track attribute, a hard ceiling on the selected track attribute's value can be provided. See tunable track attributes below for the list of available options. For example, `max_instrumentalness=0.35` would filter out most tracks that are likely to be instrumental."
    max_valence: Float,
    "For each tunable track attribute, a hard floor on the selected track attribute's value can be provided. See tunable track attributes below for the list of available options. For example, `min_tempo=140` would restrict results to only those tracks with a tempo of greater than 140 beats per minute."
    min_acousticness: Float,
    "For each tunable track attribute, a hard floor on the selected track attribute's value can be provided. See tunable track attributes below for the list of available options. For example, `min_tempo=140` would restrict results to only those tracks with a tempo of greater than 140 beats per minute."
    min_danceability: Float,
    "For each tunable track attribute, a hard floor on the selected track attribute's value can be provided. See tunable track attributes below for the list of available options. For example, `min_tempo=140` would restrict results to only those tracks with a tempo of greater than 140 beats per minute."
    min_duration_ms: Int,
    "For each tunable track attribute, a hard floor on the selected track attribute's value can be provided. See tunable track attributes below for the list of available options. For example, `min_tempo=140` would restrict results to only those tracks with a tempo of greater than 140 beats per minute."
    min_energy: Float,
    "For each tunable track attribute, a hard floor on the selected track attribute's value can be provided. See tunable track attributes below for the list of available options. For example, `min_tempo=140` would restrict results to only those tracks with a tempo of greater than 140 beats per minute."
    min_instrumentalness: Float,
    "For each tunable track attribute, a hard floor on the selected track attribute's value can be provided. See tunable track attributes below for the list of available options. For example, `min_tempo=140` would restrict results to only those tracks with a tempo of greater than 140 beats per minute."
    min_key: Int,
    "For each tunable track attribute, a hard floor on the selected track attribute's value can be provided. See tunable track attributes below for the list of available options. For example, `min_tempo=140` would restrict results to only those tracks with a tempo of greater than 140 beats per minute."
    min_liveness: Float,
    "For each tunable track attribute, a hard floor on the selected track attribute's value can be provided. See tunable track attributes below for the list of available options. For example, `min_tempo=140` would restrict results to only those tracks with a tempo of greater than 140 beats per minute."
    min_loudness: Float,
    "For each tunable track attribute, a hard floor on the selected track attribute's value can be provided. See tunable track attributes below for the list of available options. For example, `min_tempo=140` would restrict results to only those tracks with a tempo of greater than 140 beats per minute."
    min_mode: Int,
    "For each tunable track attribute, a hard floor on the selected track attribute's value can be provided. See tunable track attributes below for the list of available options. For example, `min_tempo=140` would restrict results to only those tracks with a tempo of greater than 140 beats per minute."
    min_popularity: Int,
    "For each tunable track attribute, a hard floor on the selected track attribute's value can be provided. See tunable track attributes below for the list of available options. For example, `min_tempo=140` would restrict results to only those tracks with a tempo of greater than 140 beats per minute."
    min_speechiness: Float,
    "For each tunable track attribute, a hard floor on the selected track attribute's value can be provided. See tunable track attributes below for the list of available options. For example, `min_tempo=140` would restrict results to only those tracks with a tempo of greater than 140 beats per minute."
    min_tempo: Float,
    "For each tunable track attribute, a hard floor on the selected track attribute's value can be provided. See tunable track attributes below for the list of available options. For example, `min_tempo=140` would restrict results to only those tracks with a tempo of greater than 140 beats per minute."
    min_time_signature: Int,
    "For each tunable track attribute, a hard floor on the selected track attribute's value can be provided. See tunable track attributes below for the list of available options. For example, `min_tempo=140` would restrict results to only those tracks with a tempo of greater than 140 beats per minute."
    min_valence: Float,
    "A comma separated list of [Spotify IDs](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for seed artists. Up to 5 seed values may be provided in any combination of `seed_artists`, `seed_tracks` and `seed_genres`."
    seed_artists: String!,
    "A comma separated list of any genres in the set of [available genre seeds](#available-genre-seeds). Up to 5 seed values may be provided in any combination of `seed_artists`, `seed_tracks` and `seed_genres`."
    seed_genres: String!,
    "A comma separated list of [Spotify IDs](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for a seed track. Up to 5 seed values may be provided in any combination of `seed_artists`, `seed_tracks` and `seed_genres`."
    seed_tracks: String!,
    "For each of the tunable track attributes (below) a target value may be provided. Tracks with the attribute values nearest to the target values will be preferred. For example, you might request `target_energy=0.6` and `target_danceability=0.8`. All target values will be weighed equally in ranking results."
    target_acousticness: Float,
    "For each of the tunable track attributes (below) a target value may be provided. Tracks with the attribute values nearest to the target values will be preferred. For example, you might request `target_energy=0.6` and `target_danceability=0.8`. All target values will be weighed equally in ranking results."
    target_danceability: Float,
    "Target duration of the track (ms)"
    target_duration_ms: Int,
    "For each of the tunable track attributes (below) a target value may be provided. Tracks with the attribute values nearest to the target values will be preferred. For example, you might request `target_energy=0.6` and `target_danceability=0.8`. All target values will be weighed equally in ranking results."
    target_energy: Float,
    "For each of the tunable track attributes (below) a target value may be provided. Tracks with the attribute values nearest to the target values will be preferred. For example, you might request `target_energy=0.6` and `target_danceability=0.8`. All target values will be weighed equally in ranking results."
    target_instrumentalness: Float,
    "For each of the tunable track attributes (below) a target value may be provided. Tracks with the attribute values nearest to the target values will be preferred. For example, you might request `target_energy=0.6` and `target_danceability=0.8`. All target values will be weighed equally in ranking results."
    target_key: Int,
    "For each of the tunable track attributes (below) a target value may be provided. Tracks with the attribute values nearest to the target values will be preferred. For example, you might request `target_energy=0.6` and `target_danceability=0.8`. All target values will be weighed equally in ranking results."
    target_liveness: Float,
    "For each of the tunable track attributes (below) a target value may be provided. Tracks with the attribute values nearest to the target values will be preferred. For example, you might request `target_energy=0.6` and `target_danceability=0.8`. All target values will be weighed equally in ranking results."
    target_loudness: Float,
    "For each of the tunable track attributes (below) a target value may be provided. Tracks with the attribute values nearest to the target values will be preferred. For example, you might request `target_energy=0.6` and `target_danceability=0.8`. All target values will be weighed equally in ranking results."
    target_mode: Int,
    "For each of the tunable track attributes (below) a target value may be provided. Tracks with the attribute values nearest to the target values will be preferred. For example, you might request `target_energy=0.6` and `target_danceability=0.8`. All target values will be weighed equally in ranking results."
    target_popularity: Int,
    "For each of the tunable track attributes (below) a target value may be provided. Tracks with the attribute values nearest to the target values will be preferred. For example, you might request `target_energy=0.6` and `target_danceability=0.8`. All target values will be weighed equally in ranking results."
    target_speechiness: Float,
    "Target tempo (BPM)"
    target_tempo: Float,
    "For each of the tunable track attributes (below) a target value may be provided. Tracks with the attribute values nearest to the target values will be preferred. For example, you might request `target_energy=0.6` and `target_danceability=0.8`. All target values will be weighed equally in ranking results."
    target_time_signature: Int,
    "For each of the tunable track attributes (below) a target value may be provided. Tracks with the attribute values nearest to the target values will be preferred. For example, you might request `target_energy=0.6` and `target_danceability=0.8`. All target values will be weighed equally in ranking results."
    target_valence: Float
  ): Recommendations
  recommendation_genres: [String]
  search(
    """
    Possible values: *audio*
    If *include_external=audio* is specified the response will include any relevant audio content that is hosted externally.
    By default external content is filtered out from responses.
    """
    include_external: String,
    """
    Maximum number of results to return.
    Default: 20
    Minimum: 1
    Maximum: 50
    **Note** : The limit is applied within each type, not on the total response.
    For example, if the limit value is 3 and the type is `artist,album`, the response contains 3 artists and 3 albums.
    """
    limit: Int,
    """
    The index of the first result to return.
    Default: 0 (the first result).
    Maximum offset (including limit): 1,000.
    Use with limit to get the next page of search results.
    """
    offset: Int,
    """
    Search [query](#writing-a-query---guidelines) keywords and optional field filters and operators.
    For example:
    `q=roadhouse%20blues`.
    """
    q: String!,
    """
    A comma-separated list of item types to search across.
    Valid types are: `album` , `artist`, `playlist`, `track`, `show` and `episode`.
    Search results include hits from all the specified item types.
    For example: `q=name:abacab&type=album,track` returns both albums ***and*** tracks with "abacab" included in their name.
    """
    type: String!
  ): SearchResponse
  user(
    "The user's [Spotify user ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)."
    user_id: String!
  ): PublicUser
}

type RecommendationSeed {
  "The number of tracks available after min_\\* and max_\\* filters have been applied."
  afterFilteringSize: Int
  "The number of tracks available after relinking for regional availability."
  afterRelinkingSize: Int
  "A link to the full track or artist data for this seed. For tracks this will be a link to a [Track Object](https://developer.spotify.com/documentation/web-api/reference/#object-trackobject). For artists a link to [an Artist Object](https://developer.spotify.com/documentation/web-api/reference/#object-artistobject). For genre seeds, this value will be `null`."
  href: String
  "The id used to select this seed. This will be the same as the string used in the `seed_artists`, `seed_tracks` or `seed_genres` parameter."
  id: String
  "The number of recommended tracks available for this seed."
  initialPoolSize: Int
  "The entity type of this seed. One of `artist`, `track` or `genre`."
  spotify_type: String
}

type Recommendations {
  "An array of [recommendation seed objects](https://developer.spotify.com/documentation/web-api/reference/#object-recommendationseedobject)."
  seeds: [RecommendationSeed]
  "An array of [track object](https://developer.spotify.com/documentation/web-api/reference/#object-trackobject) ordered according to the parameters supplied."
  tracks: [Track]
}

type RemoveAlbumsUserPayload {
  status: Int
}

type RemoveEpisodesUserPayload {
  status: Int
}

type RemoveShowsUserPayload {
  status: Int
}

type RemoveTracksPlaylistPayload {
  snapshot_id: SnapshotId
  status: Int
}

type RemoveTracksUserPayload {
  status: Int
}

type ReorderPlaylistsTracksPayload {
  snapshot_id: SnapshotId
  status: Int
}

type ReplacePlaylistsTracksPayload {
  snapshot_id: SnapshotId
  status: Int
}

type SaveAlbumsUserPayload {
  status: Int
}

type SaveEpisodesUserPayload {
  status: Int
}

type SaveShowsUserPayload {
  status: Int
}

type SaveTracksUserPayload {
  status: Int
}

type SavedAlbum {
  "The date and time the album was saved Timestamps are returned in ISO 8601 format as Coordinated Universal Time (UTC) with a zero offset: YYYY-MM-DDTHH:MM:SSZ. If the time is imprecise (for example, the date/time of an album release), an additional field indicates the precision; see for example, release_date in an album object."
  added_at: String
  "Information about the album."
  album: Album
}

type SavedEpisode {
  "The date and time the episode was saved. Timestamps are returned in ISO 8601 format as Coordinated Universal Time (UTC) with a zero offset: YYYY-MM-DDTHH:MM:SSZ."
  added_at: String
  "Information about the episode."
  episode: Episode
}

type SavedShow {
  "The date and time the show was saved. Timestamps are returned in ISO 8601 format as Coordinated Universal Time (UTC) with a zero offset: YYYY-MM-DDTHH:MM:SSZ. If the time is imprecise (for example, the date/time of an album release), an additional field indicates the precision; see for example, release_date in an album object."
  added_at: String
  "Information about the show."
  show: Show
}

type SavedTrack {
  "The date and time the track was saved. Timestamps are returned in ISO 8601 format as Coordinated Universal Time (UTC) with a zero offset: YYYY-MM-DDTHH:MM:SSZ. If the time is imprecise (for example, the date/time of an album release), an additional field indicates the precision; see for example, release_date in an album object."
  added_at: String
  "Information about the track."
  track: Track
}

type SearchResponse {
  albums: AlbumsPaging
  artists: ArtistsPaging
  episodes: EpisodesPaging
  playlists: PlaylistsPaging
  shows: ShowsPaging
  tracks: TracksPaging
}

type SeekToPositionInCurrentlyPlayingTrackPayload {
  status: Int
}

type SetRepeatModeOnUsersPlaybackPayload {
  status: Int
}

type SetVolumeForUsersPlaybackPayload {
  status: Int
}

type SkipUsersPlaybackToNextTrackPayload {
  status: Int
}

type SkipUsersPlaybackToPreviousTrackPayload {
  status: Int
}

type SnapshotId {
  "The snapshot_id can be used to identify your playlist version in future requests."
  snapshot_id: String
}

type StartAUsersPlaybackPayload {
  status: Int
}

type ToggleShuffleForUsersPlaybackPayload {
  status: Int
}

type TransferAUsersPlaybackPayload {
  status: Int
}

type UnfollowArtistsUsersPayload {
  status: Int
}

type UnfollowPlaylistPayload {
  status: Int
}

type UploadCustomPlaylistCoverPayload {
  status: Int
}

input addToQueueInput {
  "The id of the device this command is targeting. If not supplied, the user's currently active device is the target."
  device_id: String
  "The uri of the item to add to the queue. Must be a track or an episode uri."
  uri: String!
}

input addTracksToPlaylistInput {
  "The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the playlist."
  playlist_id: String!
  "The position to insert the items, a zero-based index. For example, to insert the items in the first position: `position=0` ; to insert the items in the third position: `position=2`. If omitted, the items will be appended to the playlist. Items are added in the order they appear in the uris array. For example: `{\"uris\": [\"spotify:track:4iV5W9uYEdYUVa79Axb7Rh\",\"spotify:track:1301WleyT98MSxVHPZCA6M\"], \"position\": 3}`"
  position: Int
  """
  A JSON array of the [Spotify URIs](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) to add. For example: `{"uris": ["spotify:track:4iV5W9uYEdYUVa79Axb7Rh","spotify:track:1301WleyT98MSxVHPZCA6M", "spotify:episode:512ojhOuo1ktJprKbVcKyQ"]}`
  A maximum of 100 items can be added in one request. *Note: if the `uris` parameter is present in the query string, any URIs listed here in the body will be ignored.*
  """
  uris: [String]!
}

input changePlaylistDetailsInput {
  "If `true` , the playlist will become collaborative and other users will be able to modify the playlist in their Spotify client. *Note: You can only set `collaborative` to `true` on non-public playlists.*"
  collaborative: Boolean
  "Value for playlist description as displayed in Spotify Clients and in the Web API."
  description: String
  "The new name for the playlist, for example `\"My New Playlist Title\"`"
  name: String
  "The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the playlist."
  playlist_id: String!
  "If `true` the playlist will be public, if `false` it will be private."
  public: Boolean
}

input createPlaylistInput {
  "Defaults to `false` . If `true` the playlist will be collaborative. Note that to create a collaborative playlist you must also set `public` to `false` . To create collaborative playlists you must have granted `playlist-modify-private` and `playlist-modify-public` [scopes](https://developer.spotify.com/documentation/general/guides/authorization-guide/#list-of-scopes) ."
  collaborative: Boolean
  "value for playlist description as displayed in Spotify Clients and in the Web API."
  description: String
  "The name for the new playlist, for example `\"Your Coolest Playlist\"` . This name does not need to be unique; a user may have several playlists with the same name."
  name: String!
  "Defaults to `true` . If `true` the playlist will be public, if `false` it will be private. To be able to create private playlists, the user must have granted the `playlist-modify-private` [scope](https://developer.spotify.com/documentation/general/guides/authorization-guide/#list-of-scopes)"
  public: Boolean
  "The user's [Spotify user ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)."
  user_id: String!
}

input followArtistsUsersInput {
  "A JSON array of the artist or user [Spotify IDs](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids). For example: `{ids:[\"74ASZWbe4lXaubB36ztrGX\", \"08td7MxkoHQkXnWAYD8d6Q\"]}`. A maximum of 50 IDs can be sent in one request. *Note: if the `ids` parameter is present in the query string, any IDs listed here in the body will be ignored.*"
  ids: [String]!
  "The ID type: either `artist` or `user`."
  type: String!
}

input followPlaylistInput {
  "The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) of the playlist. Any playlist can be followed, regardless of its [public/private status](https://developer.spotify.com/documentation/general/guides/working-with-playlists/#public-private-and-collaborative-status), as long as you know its playlist ID."
  playlist_id: String!
  "Defaults to `true`. If `true` the playlist will be included in user's public playlists, if `false` it will remain private."
  public: Boolean
}

input pauseAUsersPlaybackInput {
  "The id of the device this command is targeting. If not supplied, the user's currently active device is the target."
  device_id: String
}

input removeAlbumsUserInput {
  """
  A JSON array of the [Spotify IDs](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids). For example: `["4iV5W9uYEdYUVa79Axb7Rh", "1301WleyT98MSxVHPZCA6M"]`
  A maximum of 50 items can be specified in one request. *Note: if the `ids` parameter is present in the query string, any IDs listed here in the body will be ignored.*
  """
  ids: [String]!
}

input removeEpisodesUserInput {
  """
  A JSON array of the [Spotify IDs](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids).
  A maximum of 50 items can be specified in one request. *Note: if the `ids` parameter is present in the query string, any IDs listed here in the body will be ignored.*
  """
  ids: [String]!
}

input removeShowsUserInput {
  """
  A JSON array of the [Spotify IDs](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids).
  A maximum of 50 items can be specified in one request. *Note: if the `ids` parameter is present in the query string, any IDs listed here in the body will be ignored.*
  """
  ids: [String]!
  """
  An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). If a country code is specified, only shows that are available in that market will be removed.
  If a valid user access token is specified in the request header, the country associated with the user account will take priority over this parameter.
  *Note: If neither market or user country are provided, the content is considered unavailable for the client.*
  Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).
  """
  market: String
}

input removeTracksPlaylistInput {
  "The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)"
  playlist_id: String!
  "The playlist's snapshot ID against which you want to make the changes. The API will validate that the specified items exist and in the specified positions and make the changes, even if more recent changes have been made to the playlist."
  snapshot_id: String
  "An array of objects containing [Spotify URIs](https://developer.spotify.com/spotify-documentation/web-api/#spotify-uris-and-ids) of the tracks or episodes to remove. For example: `{ \"tracks\": [{ \"uri\": \"spotify:track:4iV5W9uYEdYUVa79Axb7Rh\" },{ \"uri\": \"spotify:track:1301WleyT98MSxVHPZCA6M\" }] }`. A maximum of 100 objects can be sent at once."
  tracks: [String]!
}

input removeTracksUserInput {
  """
  A JSON array of the [Spotify IDs](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids). For example: `["4iV5W9uYEdYUVa79Axb7Rh", "1301WleyT98MSxVHPZCA6M"]`
  A maximum of 50 items can be specified in one request. *Note: if the `ids` parameter is present in the query string, any IDs listed here in the body will be ignored.*
  """
  ids: [String]!
}

input reorderPlaylistsTracksInput {
  """
  The position where the items should be inserted.
  To reorder the items to the end of the playlist, simply set *insert_before* to the position after the last item.
  Examples:
  To reorder the first item to the last position in a playlist with 10 items, set *range_start* to 0, and *insert_before* to 10.
  To reorder the last item in a playlist with 10 items to the start of the playlist, set *range_start* to 9, and *insert_before* to 0.
  """
  insert_before: Int!
  "The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the playlist."
  playlist_id: String!
  """
  The amount of items to be reordered. Defaults to 1 if not set.
  The range of items to be reordered begins from the *range_start* position, and includes the *range_length* subsequent items.
  Example:
  To move the items at index 9-10 to the start of the playlist, *range_start* is set to 9, and *range_length* is set to 2.
  """
  range_length: Int
  "The position of the first item to be reordered."
  range_start: Int!
  "The playlist's snapshot ID against which you want to make the changes."
  snapshot_id: String
}

input replacePlaylistsTracksInput {
  "The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the playlist."
  playlist_id: String!
  """
  A comma-separated list of [Spotify URIs](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) to set, can be track or episode URIs. For example: `uris=spotify:track:4iV5W9uYEdYUVa79Axb7Rh,spotify:track:1301WleyT98MSxVHPZCA6M,spotify:episode:512ojhOuo1ktJprKbVcKyQ`
  A maximum of 100 items can be set in one request.
  """
  uris: [String]!
}

input saveAlbumsUserInput {
  """
  A JSON array of the [Spotify IDs](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids). For example: `["4iV5W9uYEdYUVa79Axb7Rh", "1301WleyT98MSxVHPZCA6M"]`
  A maximum of 50 items can be specified in one request. *Note: if the `ids` parameter is present in the query string, any IDs listed here in the body will be ignored.*
  """
  ids: [String]!
}

input saveEpisodesUserInput {
  """
  A JSON array of the [Spotify IDs](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids).
  A maximum of 50 items can be specified in one request. *Note: if the `ids` parameter is present in the query string, any IDs listed here in the body will be ignored.*
  """
  ids: [String]!
}

input saveShowsUserInput {
  """
  A JSON array of the [Spotify IDs](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids).
  A maximum of 50 items can be specified in one request. *Note: if the `ids` parameter is present in the query string, any IDs listed here in the body will be ignored.*
  """
  ids: [String]!
}

input saveTracksUserInput {
  """
  A JSON array of the [Spotify IDs](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids). For example: `["4iV5W9uYEdYUVa79Axb7Rh", "1301WleyT98MSxVHPZCA6M"]`
  A maximum of 50 items can be specified in one request. *Note: if the `ids` parameter is present in the query string, any IDs listed here in the body will be ignored.*
  """
  ids: [String]!
}

input seekToPositionInCurrentlyPlayingTrackInput {
  "The id of the device this command is targeting. If not supplied, the user's currently active device is the target."
  device_id: String
  "The position in milliseconds to seek to. Must be a positive number. Passing in a position that is greater than the length of the track will cause the player to start playing the next song."
  position_ms: Int!
}

input setRepeatModeOnUsersPlaybackInput {
  "The id of the device this command is targeting. If not supplied, the user's currently active device is the target."
  device_id: String
  """
  **track** , **context** or **off** .
  **track** will repeat the current track.
  **context** will repeat the current context.
  **off** will turn repeat off.
  """
  state: String!
}

input setVolumeForUsersPlaybackInput {
  "The id of the device this command is targeting. If not supplied, the user's currently active device is the target."
  device_id: String
  "The volume to set. Must be a value from 0 to 100 inclusive."
  volume_percent: Int!
}

input skipUsersPlaybackToNextTrackInput {
  "The id of the device this command is targeting. If not supplied, the user's currently active device is the target."
  device_id: String
}

input skipUsersPlaybackToPreviousTrackInput {
  "The id of the device this command is targeting. If not supplied, the user's currently active device is the target."
  device_id: String
}

input startAUsersPlaybackInput {
  "Spotify URI of the context to play. Valid contexts are albums, artists, playlists. Example: {\"context_uri\": \"spotify:album:1Je1IMUlBXcx1Fz0WE7oPT\"}"
  context_uri: String
  "The id of the device this command is targeting. If not supplied, the user's currently active device is the target."
  device_id: String
  "Indicates from what position to start playback. Must be a positive number. Passing in a position that is greater than the length of the track will cause the player to start playing the next song."
  position_ms: Int
  "A JSON array of the Spotify track URIs to play. For example: {\"uris\": [\"spotify:track:4iV5W9uYEdYUVa79Axb7Rh\", \"spotify:track:1301WleyT98MSxVHPZCA6M\"]}"
  uris: [String]
}

input toggleShuffleForUsersPlaybackInput {
  "The id of the device this command is targeting. If not supplied, the user's currently active device is the target."
  device_id: String
  """
  **true** : Shuffle user's playback.
  **false** : Do not shuffle user's playback.
  """
  state: Boolean!
}

input transferAUsersPlaybackInput {
  """
  A JSON array containing the ID of the device on which playback should be started/transferred.
  For example:`{device_ids:["74ASZWbe4lXaubB36ztrGX"]}`
  Note: Although an array is accepted, only a single device_id is currently supported. Supplying more than one will return `400 Bad Request`
  """
  device_ids: [String]!
  """
  **true** : ensure playback happens on new device.
  **false** or not provided: keep the current playback state.
  """
  play: Boolean
}

input unfollowArtistsUsersInput {
  "A JSON array of the artist or user [Spotify IDs](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids). For example: `{ids:[\"74ASZWbe4lXaubB36ztrGX\", \"08td7MxkoHQkXnWAYD8d6Q\"]}`. A maximum of 50 IDs can be sent in one request. *Note: if the `ids` parameter is present in the query string, any IDs listed here in the body will be ignored.*"
  ids: [String]!
  "The ID type: either `artist` or `user`."
  type: String!
}

input unfollowPlaylistInput {
  "The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) of the playlist that is to be no longer followed."
  playlist_id: String!
}

input uploadCustomPlaylistCoverInput {
  "The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the playlist."
  playlist_id: String!
}
