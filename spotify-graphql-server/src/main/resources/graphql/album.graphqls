extend type Query {
  album(
    "The Spotify ID of the object to query. Either `id` or `uri` must be specified"
    id: String, 
    "The Spotify URI of the object to query. Either `id` or `uri` must be specified"
    uri: String
  ): Album
  albums(
    "A list of Spotify IDs of the objects to query. Either `ids` or `uris` must be specified"
    ids: [String], 
    "A list of Spotify URIs of the objects to query. Either `ids` or `uris` must be specified"
    uris: [String]
  ): [Album]
}

type Album {
  "The type of the album."
  album_type: String
  "The artists of the album. Each artist object includes a link in `href` to more detailed information about the artist."
  artists: [Artist]
  "The markets in which the album is available: [ISO 3166-1 alpha-2 country codes](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). _**NOTE**: an album is considered available in a market when at least 1 of its tracks is available in that market._"
  available_markets: [String]
  "The copyright statements of the album."
  copyrights: [Copyright]
  "Known external IDs for the album."
  external_ids: ExternalId
  "Known external URLs for this album."
  external_urls: ExternalUrl
  "A list of the genres used to classify the album. (If not yet classified, the array is empty.)"
  genres: [String]
  "A link to the Web API endpoint providing full details of the album."
  href: String
  "The [Spotify ID](/documentation/web-api/#spotify-uris-and-ids) for the album."
  id: String
  "The cover art for the album in various sizes, widest first."
  images: [Image]
  "The label for the album."
  label: String
  "The name of the album. In case of an album takedown, the value may be an empty string."
  name: String
  "The popularity of the album, with 100 being the most popular. The popularity is calculated from the popularity of the album's individual tracks."
  popularity: Int
  "The date the album was first released."
  release_date: String
  "The precision with which `release_date` value is known."
  release_date_precision: String
  "Included in the response when a content restriction is applied."
  restrictions: AlbumRestriction
  "The object type."
  spotify_type: String
  "The number of tracks in the album."
  total_tracks: Int
  "The tracks of the album."
  tracks(
    "The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50."
    limit: Int = 20, 
    "The index of the first item to return. Default: 0 (the first item). Use with limit to get the next set of items."
    offset: Int = 0
  ): TracksPaging
  "The [Spotify URI](/documentation/web-api/#spotify-uris-and-ids) for the album."
  uri: String
}

type AlbumRestriction {
  """
  The reason for the restriction. Albums may be restricted if the content is not available in a given market, to the user's subscription type, or when the user's account is set to not play explicit content.
  Additional reasons may be added in the future.
  """
  reason: String
}

type AlbumsPaging {
  "A link to the Web API endpoint returning the full result of the request"
  href: String
  "The requested content"
  items: [Album]
  "The maximum number of items in the response (as set in the query or by default)."
  limit: Int
  "URL to the next page of items. ( `null` if none)"
  next: String
  "The offset of the items returned (as set in the query or by default)"
  offset: Int
  "URL to the previous page of items. ( `null` if none)"
  previous: String
  "The total number of items available to return."
  total: Int
}

