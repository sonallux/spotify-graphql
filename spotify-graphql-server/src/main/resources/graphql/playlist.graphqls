type Playlist {
  "`true` if the owner allows other users to modify the playlist."
  collaborative: Boolean
  "The playlist description. *Only returned for modified, verified playlists, otherwise* `null`."
  description: String
  "Known external URLs for this playlist."
  external_urls: ExternalUrl
  "Information about the followers of the playlist."
  followers: Followers
  "A link to the Web API endpoint providing full details of the playlist."
  href: String
  "The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the playlist."
  id: String
  "Images for the playlist. The array may be empty or contain up to three images. The images are returned by size in descending order. See [Working with Playlists](https://developer.spotify.com/documentation/general/guides/working-with-playlists/). *Note: If returned, the source URL for the image (`url`) is temporary and will expire in less than a day.*"
  images: [Image]
  "The name of the playlist."
  name: String
  "The user who owns the playlist"
  owner: PlaylistOwner
  "The playlist's public/private status: `true` the playlist is public, `false` the playlist is private, `null` the playlist status is not relevant. For more about public/private status, see [Working with Playlists](https://developer.spotify.com/documentation/general/guides/working-with-playlists/)"
  public: Boolean
  "The version identifier for the current playlist. Can be supplied in other requests to target a specific playlist version"
  snapshot_id: String
  "The object type: 'playlist'"
  spotify_type: String
  "Information about the tracks of the playlist. Note, a track object may be `null`. This can happen if a track is no longer available."
  tracks(
    "The maximum number of items to return. Default: 100. Minimum: 1. Maximum: 100."
    limit: Int = 100,
    "The index of the first item to return. Default: 0 (the first object)."
    offset: Int = 0
  ): PagingPlaylistTrack
  "The [Spotify URI](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the playlist."
  uri: String
}

type PlaylistOwner {
  "The name displayed on the user's profile. `null` if not available."
  display_name: String
  "Known external URLs for this user."
  external_urls: ExternalUrl
  "Information about the followers of the user."
  followers: Followers
  "A link to the Web API endpoint for this user."
  href: String
  "The [Spotify user ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the user."
  id: String
  "The object type: 'user'"
  spotify_type: String
  "The [Spotify URI](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for this user."
  uri: String
}

type PlaylistUser {
  "Known external URLs for this user."
  external_urls: ExternalUrl
  "Information about the followers of the user."
  followers: Followers
  "A link to the Web API endpoint for this user."
  href: String
  "The [Spotify user ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the user."
  id: String
  "The object type: 'user'"
  spotify_type: String
  "The [Spotify URI](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for this user."
  uri: String
}

type PlaylistTrack {
  "The date and time the track or episode was added. *Note that some very old playlists may return `null` in this field.*"
  added_at: String
  "The Spotify user who added the track or episode. *Note that some very old playlists may return `null` in this field.*"
  added_by: PlaylistUser
  "Whether this track or episode is a [local file](https://developer.spotify.com/web-api/local-files-spotify-playlists/) or not."
  is_local: Boolean
  "Information about the track or episode."
  track: UnionTrackEpisode
}

type PagingPlaylist {
  "A link to the Web API endpoint returning the full result of the request"
  href: String
  "The requested data."
  items: [Playlist]
  "The maximum number of items in the response (as set in the query or by default)."
  limit: Int
  "URL to the next page of items. ( `null` if none)"
  next: String
  "The offset of the items returned (as set in the query or by default)"
  offset: Int
  "URL to the previous page of items. ( `null` if none)"
  previous: String
  "The total number of items available to return."
  total: Int
}

type PagingPlaylistTrack {
  "A link to the Web API endpoint returning the full result of the request"
  href: String
  "The requested data."
  items: [PlaylistTrack]
  "The maximum number of items in the response (as set in the query or by default)."
  limit: Int
  "URL to the next page of items. ( `null` if none)"
  next: String
  "The offset of the items returned (as set in the query or by default)"
  offset: Int
  "URL to the previous page of items. ( `null` if none)"
  previous: String
  "The total number of items available to return."
  total: Int
}
